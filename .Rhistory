# Dane
starwars
library(dplyr) # https://dplyr.tidyverse.org/
# Dane
starwars
View(starwars)
View(starwars)
starwars_new <- starwars[, c(1, 2, 3, 4, 5, 7, 8)]
View(starwars_new)
# a) wybór kolumn ---> select()
starwars_new %>% select(c(1, 2))
# b) wybór wierszy ---> filter()
starwars_new %>% filter(height > 130)
# Zadanie 1
# Używając funkcji z pakietu dplyr() wybierz te postacie, których gatunek to Droid,
# a ich wysokość jest większa niż 100.
starwars %>% filter(height > 100 && species == "Droid") %>% select(c("name", "height"))
# Zadanie 1
# Używając funkcji z pakietu dplyr() wybierz te postacie, których gatunek to Droid,
# a ich wysokość jest większa niż 100.
starwars %>% filter(height > 100 & species == "Droid") %>% select(c("name", "height"))
# Zadanie 2
# Używając funkcji z pakietu dplyr() wybierz te postacie, które nie mają określonego koloru włosów.
starwars %>% filter(is.na(hair_color)) %>% select(name)
# c) sortowanie wierszy ---> arrange()
starwars %>% select(c("name", "height")) %>% arrange(height)
# c) sortowanie wierszy ---> arrange()
starwars %>% select(c("name", "height")) %>% arrange(desc(height))
# Zadanie 3
# Używając funkcji z pakietu dplyr() wybierz postać o największej masie.
starwars %>% select(c("name", "mass")) %>% arrange(desc(mass)) %>% filter(1)
# Zadanie 3
# Używając funkcji z pakietu dplyr() wybierz postać o największej masie.
starwars %>% select(c("name", "mass")) %>% arrange(desc(mass)) %>% slice(1)
# d) transformacja zmiennych ---> mutate()
starwars %>% mutate(bmi = mass / ((height/100)**2)) %>% select(name, height, mass, bmi)
library(ggplot)
library(ggplot2)
# d) transformacja zmiennych ---> mutate()
bmi <- starwars %>% mutate(bmi = mass / ((height/100)**2)) %>% select(name, height, mass, bmi)
ggplot(bmi, aes(x=bmi) + geom_histogram(binwidth = 3, fill = "blue", color = "black"))
ggplot(bmi, aes(x=bmi)) + geom_histogram(bins = 15, fill = "blue", color = "black"))
ggplot(bmi, aes(x=bmi)) + geom_histogram(bins = 15, fill = "blue", color = "black")
ggplot(bmi, aes(x=bmi)) + geom_histogram(binwidth = 3, fill = "blue", color = "black")
ggplot(bmi, aes(x=bmi)) + geom_histogram(binwidth = 3, fill = "blue", color = "black") + xlim(0, 60)
{ggplot(bmi, aes(x=bmi)) +
geom_histogram(binwidth = 3, fill = "blue", color = "black") +
xlim(0, 60) +
scale_fill_gradient(low = "red", mid = "green", high = "red", midpoint = 21)}
{ggplot(bmi, aes(x=bmi)) +
geom_histogram(binwidth = 3, fill = "blue", color = "black") +
xlim(0, 60) +
scale_fill_gradient2(low = "red", mid = "green", high = "red", midpoint = 21)}
{ggplot(bmi, aes(x=bmi)) +
geom_histogram(binwidth = 3, fill = "blue", color = "black") +
xlim(0, 60) +
scale_fill_gradient2(low = "red", mid = "green", high = "red", midpoint = 21)}
{ggplot(bmi, aes(x=bmi, fill = bmi)) +
geom_histogram(binwidth = 3, fill = "blue", color = "black") +
xlim(0, 60) +
scale_fill_gradient2(low = "red", mid = "green", high = "red", midpoint = 21)}
{ggplot(bmi, aes(x=bmi, fill = bmi)) +
geom_histogram(binwidth = 3, color = "black") +
xlim(0, 60) +
scale_fill_gradient2(low = "red", mid = "green", high = "red", midpoint = 21)}
{ggplot(bmi, aes(x=bmi, fill = bmi)) +
geom_histogram(binwidth = 3, color = "black") +
xlim(0, 60) +
scale_fill_gradient2(low = "red", mid = "green", high = "red", midpoint = 21)}
{ggplot(bmi, aes(x=bmi, fill = bmi)) +
geom_histogram(binwidth = 3, color = "black") +
xlim(0, 60) +
scale_fill_gradient2(low = "red", mid = "green", high = "red", midpoint = 21, na.value = "grey50")}
{ggplot(bmi, aes(x=bmi)) +
geom_histogram(aes(fill = ..count..), binwidth = 3, color = "black") +
xlim(0, 60) +
scale_fill_gradient2(low = "red", mid = "green", high = "red", midpoint = 21, na.value = "grey50")}
# e) transformacja zmiennych ---> transmute()
starwars %>% select(name, height) %>% transmute(height_m = height/100)
# e) transformacja zmiennych ---> transmute()
starwars %>% transmute(name, height_m = height/100)
# Zadanie 4
# Używając funkcji z pakietu dplyr() wylicz wskaźnik BMI (kg/m^2) i wskaż postać, która ma największy wskaźnik.
starwars %>% mutate(bmi = mass / ((height/100)**2)) %>% select(name, height, mass, bmi) %>% arrange(desc(bmi))
# g) dyskretyzacja ---> ifelse(), case_when()
starwars %>% mutate(bin_height = if_else(height > 190, "tall", "short")) %>% select(name, height, bin_height)
# h) funkcje agregujące ---> summarise(), n(), mean, median, min, max, sum, sd, quantile
starwars %>% group_by(spicies) %>% summarise(num=n(height), mean_h=mean(height)) %>% select(group, num, mean_h)
# h) funkcje agregujące ---> summarise(), n(), mean, median, min, max, sum, sd, quantile
starwars %>% group_by(species) %>% summarise(num=n(height), mean_h=mean(height)) %>% select(group, num, mean_h)
# h) funkcje agregujące ---> summarise(), n(), mean, median, min, max, sum, sd, quantile
starwars %>% group_by(species) %>% summarise(num=n(height), mean_h=mean(height))
# h) funkcje agregujące ---> summarise(), n(), mean, median, min, max, sum, sd, quantile
starwars %>% group_by(species) %>% summarise(num=n(), mean_h=mean(height))
# h) funkcje agregujące ---> summarise(), n(), mean, median, min, max, sum, sd, quantile
starwars %>% group_by(species) %>% summarise(num=n(), mean_h=mean(height)) %>% arrange(desc(num))
# h) funkcje agregujące ---> summarise(), n(), mean, median, min, max, sum, sd, quantile
starwars %>% group_by(species) %>% summarise(num=n(), mean_h=mean(height, na.rm = TRUE)) %>% arrange(desc(num))
# 3) Przekształcenie ramki danych w tidyr
library(tidyr) # https://tidyr.tidyverse.org
?relig_income
?fish_encounters
# 4) Praca z faktorami (szczególnie w wizualizacji)
library(forcats) # https://forcats.tidyverse.org
library(ggplot2) # https://ggplot2.tidyverse.org
# 4) Praca z stringami
# Zaawansowane: https://stringi.gagolewski.com
library(stringr) # https://stringr.tidyverse.org
x <- paste0(letters[1:5], "=", 1:5, "__", letters[6:10], "=", 6:10)
x
library(dplyr)
library(tidyr)
df_orders <- read.csv('homeworks/hw1/dane/orders.csv')
df_order_items <- read.csv('homeworks/hw1/dane/order_items.csv')
df_products <- read.csv('homeworks/hw1/dane/products.csv')
df_brands <- read.csv('homeworks/hw1/dane/brands.csv')
df_categories <-  read.csv('homeworks/hw1/dane/categories.csv')
View(df_orders)
library(dplyr)
library(tidyr)
df_orders <- read.csv('homeworks/hw1/dane/orders.csv')
df_order_items <- read.csv('homeworks/hw1/dane/order_items.csv')
df_products <- read.csv('homeworks/hw1/dane/products.csv')
df_brands <- read.csv('homeworks/hw1/dane/brands.csv')
df_categories <-  read.csv('homeworks/hw1/dane/categories.csv')
View(df_orders)
View(df_orders)
View(df_order_items)
View(df_products)
View(df_brands)
View(df_categories)
View(customers)
df_customers <- read.csv('homeworks/hw1/dane/customers.csv')
View(customers)
View(df_customers)
####### Zadanie 1
# Który produkt był najczęściej kupowany w każdym kwartale w podziale na stany z których pochodzą klienci?
# Podaj nazwę produktu i rok jego produkcji.
tmep <- df_orders %>% inner_join(df_order_items, by = "order_id") %>%
select(customer_id, order_date, product_id)
temp
####### Zadanie 1
# Który produkt był najczęściej kupowany w każdym kwartale w podziale na stany z których pochodzą klienci?
# Podaj nazwę produktu i rok jego produkcji.
zd1 <- df_orders %>% inner_join(df_order_items, by = "order_id") %>%
select(customer_id, order_date, product_id)
zd1
####### Zadanie 1
# Który produkt był najczęściej kupowany w każdym kwartale w podziale na stany z których pochodzą klienci?
# Podaj nazwę produktu i rok jego produkcji.
zd1 <- df_orders %>% inner_join(df_order_items, by = "order_id") %>%
select(customer_id, order_date, product_id) %>%
inner_join(df_customers, by = customer_id) %>%
select(state, order_date, product_id)
####### Zadanie 1
# Który produkt był najczęściej kupowany w każdym kwartale w podziale na stany z których pochodzą klienci?
# Podaj nazwę produktu i rok jego produkcji.
zd1 <- df_orders %>% inner_join(df_order_items, by = "order_id") %>%
select(customer_id, order_date, product_id) %>%
inner_join(df_customers, by = "customer_id") %>%
select(state, order_date, product_id)
head(zd1)
####### Zadanie 1
# Który produkt był najczęściej kupowany w każdym kwartale w podziale na stany z których pochodzą klienci?
# Podaj nazwę produktu i rok jego produkcji.
zd1 <- df_orders %>% inner_join(df_order_items, by = "order_id") %>%
select(customer_id, order_date, product_id) %>%
inner_join(df_customers, by = "customer_id") %>%
select(state, order_date, product_id) %>%
inner_join(df_products, by = "product_id") %>%
select(order_date, product_name, model_year)
head(zd1)
View(zd1)
####### Zadanie 1
# Który produkt był najczęściej kupowany w każdym kwartale w podziale na stany z których pochodzą klienci?
# Podaj nazwę produktu i rok jego produkcji.
zd1 <- df_orders %>% inner_join(df_order_items, by = "order_id") %>%
select(customer_id, order_date, product_id) %>%
inner_join(df_customers, by = "customer_id") %>%
select(state, order_date, product_id) %>%
inner_join(df_products, by = "product_id") %>%
select(state, order_date, product_name, model_year)
View(zd1)
####### Zadanie 1
# Który produkt był najczęściej kupowany w każdym kwartale w podziale na stany z których pochodzą klienci?
# Podaj nazwę produktu i rok jego produkcji.
. <- df_orders %>% inner_join(df_order_items, by = "order_id") %>%
select(customer_id, order_date, product_id) %>%
inner_join(df_customers, by = "customer_id") %>%
select(state, order_date, product_id) %>%
inner_join(df_products, by = "product_id") %>%
select(state, order_date, product_name, model_year)
View(.)
zd1 <- . %>% group_by(state) %>% summarise(momst_wanted = mode(product_name))
View(zd1)
View(zd1)
library(lubridate)
zd1 <- . %>%  mutate(year_quarter = paste(year(order_date), "Q", quarter(order_date), sep = ""))
View(zd1)
zd1 <- .
View(zd1)
zd1 <- . %>%  mutate(year_quarter = paste(year(order_date), "Q", quarter(order_date), sep = ""))
View(zd1)
####### Zadanie 1
# Który produkt był najczęściej kupowany w każdym kwartale w podziale na stany z których pochodzą klienci?
# Podaj nazwę produktu i rok jego produkcji.
temp <- df_orders %>% inner_join(df_order_items, by = "order_id") %>%
select(customer_id, order_date, product_id) %>%
inner_join(df_customers, by = "customer_id") %>%
select(state, order_date, product_id) %>%
inner_join(df_products, by = "product_id") %>%
select(state, order_date, product_name, model_year)
View(temp)
zd1 <- temp %>%  mutate(year_quarter = paste(year(order_date), "Q", quarter(order_date), sep = ""))
View(zd1)
View(zd1)
zd1 <- temp %>%  mutate(year_quarter = paste(year(order_date), "Q", quarter(order_date), sep = "")) %>%
group_by(state, year_quarter, product_name) %>%
summarise(count = n(), .groups = "drop") %>%
slice_max(count, n = 1, with_ties = TRUE) %>%
arrange(state, year_quarter)
View(zd1)
zd1 <- temp %>%  mutate(year_quarter = paste(year(order_date), "Q", quarter(order_date), sep = "")) %>%
group_by(state, year_quarter, product_name) %>%
summarise(count = n(), .groups = "drop") %>%
slice_max(order_by = count, n = 1, with_ties = TRUE) %>%
arrange(state, year_quarter)
View(temp)
View(zd1)
zd1 <- temp %>%  mutate(year_quarter = paste(year(order_date), "Q", quarter(order_date), sep = "")) %>%
group_by(state, year_quarter, product_name) %>%
summarise(count = n(), .groups = "drop") %>%
arrange(state, year_quarter)
View(zd1)
zd1 <- temp %>%  mutate(year_quarter = paste(year(order_date), "Q", quarter(order_date), sep = "")) %>%
group_by(state, year_quarter, product_name) %>%
summarise(count = n(), .groups = "drop") %>%
group_by(state, year_quarter) %>%
filter(count == max(count)) %>%
ungroup()
View(zd1)
zd1 <- temp %>%  mutate(year_quarter = paste(year(order_date), "Q", quarter(order_date), sep = "")) %>%
group_by(state, year_quarter, product_name) %>%
summarise(count = n(), model_year = first(model_year), .groups = "drop") %>%
group_by(state, year_quarter) %>%
filter(count == max(count)) %>%
ungroup()
View(zd1)
zd1 <- temp %>%  mutate(year_quarter = paste(year(order_date), "Q", quarter(order_date), sep = "")) %>%
group_by(state, year_quarter, product_name) %>%
summarise(count = n(), model_year = first(model_year), .groups = "drop") %>%
group_by(state, year_quarter) %>%
filter(count == max(count)) %>%
ungroup() %>% select(-count)
View(zd1)
